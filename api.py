# -*- coding: utf-8 -*-
"""Team Captcha_back_end_ml.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1AVSBmynJQy-d5NcR9Exo0lcTeMjIsMCc
"""

import pandas as pd
import numpy as np
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity
from sklearn.metrics.pairwise import linear_kernel

df = pd.read_csv('courses dataset2.csv')
print(df.columns)

df.head()

df.columns

tfidf = TfidfVectorizer(stop_words='english')

tfidf_matrix = tfidf.fit_transform(df['course_title'])

print(tfidf_matrix)

from sklearn.metrics.pairwise import cosine_similarity
cosine_similarities = cosine_similarity(tfidf_matrix, tfidf_matrix)

print(cosine_similarities)

indices = pd.Series(df.index,index=df['course_title']).drop_duplicates()
print(indices['front end web developer'])

print(indices)

print(indices['learn kotlin'])

def get_recom(title,cosine_sim=cosine_similarities):
    idx = indices[title]
    print(idx)
    #Get the pairwise similarity score of all movies with that movie
    # cosime_sim = 3*3 cosine_sim[0] = 1*3
    sim_scores = list(enumerate(cosine_sim[idx]))
    
    #Start the movie based the similarity score
    sim_scores = sorted(sim_scores,key=lambda x:x[1],reverse = True)
    
    
    #Get
    sim_scores = sim_scores[1:6]
    
    course_indices = [i[0] for i in sim_scores]
    df.sort_values(by=['no of votes', 'Rating', 'price'], inplace=True)
    
    
    
    return df['url'].iloc[course_indices]

# print(get_recom("full stack wev developer", cosine_similarities))



